[
    {
        "CommandString": "Disable MOSFETs",
        "CommandEnum": 0,
        "Description": "Disables the MOSFETS (note that MOSFETs are disabled after initial power on).",
        "Input": null,
        "Output": null,
        "CommandGroup": "Basic Control"
    },
    {
        "CommandString": "Enable MOSFETs",
        "CommandEnum": 1,
        "Description": "Enables the MOSFETS.",
        "Input": null,
        "Output": null,
        "CommandGroup": "Basic Control"
    },
    {
        "CommandString": "Trapezoid move",
        "CommandEnum": 2,
        "Description": "Move immediately to the given position using the currently set speed (the speed is set by a separate command)",
        "Input": [
            {
                "ParameterName": "displacement",
                "ParameterType": "i32",
                "Description": "The displacement to travel. Can be positive or negative.",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "duration",
                "ParameterType": "u32",
                "Description": "The time over which to do the move.",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "time",
                    "InternalUnit": "timesteps",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Motion Control"
    },
    {
        "CommandString": "Set maximum velocity",
        "CommandEnum": 3,
        "Description": "Sets maximum velocity (this is not used at this time)",
        "Input": [
            {
                "ParameterName": "maximumVelocity",
                "ParameterType": "u32",
                "Description": "Maximum velocity.",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "velocity",
                    "InternalUnit": "counts_per_timestep",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Go to position",
        "CommandEnum": 4,
        "Description": "Move to this new given position in the amount of time specified. Acceleration and deceleration will be applied to make the move smooth.",
        "Input": [
            {
                "ParameterName": "position",
                "ParameterType": "i32",
                "Description": "New absolute position value.",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "duration",
                "ParameterType": "u32",
                "Description": "Time allowed for executing the move.",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "time",
                    "InternalUnit": "timesteps",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Motion Control"
    },
    {
        "CommandString": "Set maximum acceleration",
        "CommandEnum": 5,
        "Description": "Sets max acceleration",
        "Input": [
            {
                "ParameterName": "maximumAcceleration",
                "ParameterType": "u32",
                "Description": "The maximum acceleration.",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "acceleration",
                    "InternalUnit": "counts_per_timestep_squared",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Start calibration",
        "CommandEnum": 6,
        "Description": "Starts a calibration, which will determine the average values of the hall sensors and will determine if they are working correctly",
        "Input": null,
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Capture hall sensor data",
        "CommandEnum": 7,
        "Description": "Start sending hall sensor data (work in progress; don't send this command)",
        "Input": [
            {
                "ParameterName": "captureType",
                "ParameterType": "u8",
                "Description": "Indicates the type of data to capture. Currently 1 to 3 are valid.",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "nPointsToRead",
                "ParameterType": "u32",
                "Description": "Number of points to read back from the device",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "channelsToCaptureBitmask",
                "ParameterType": "u8",
                "TooltipDisplayFormat": "%u",
                "Description": "Channels to capture bitmask. The first three bits are valid, which will turn on (0) or turn off (0) that hall sensor channel"
            },
            {
                "ParameterName": "timeStepsPerSample",
                "ParameterType": "u16",
                "Description": "Aquire a sample every this number of time steps. Time steps happen at the update frequency, which can be read with the Get product specs command",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "nSamplesToSum",
                "ParameterType": "u16",
                "Description": "Number of samples to sum together to make one point to transmit back",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "divisionFactor",
                "ParameterType": "u16",
                "Description": "Division factor to apply to the sum of the samples to scale it down before transmitting it so that it fits into the returned data type, which is a 16-bit number per each hall sensor",
                "TooltipDisplayFormat": "%hu"
            }
        ],
        "Output": [
            {
                "ParameterName": "data",
                "ParameterType": "general_data",
                "Description": "The data of the hall sensors after suming and averaging",
                "TooltipDisplayFormat": null
            }
        ],
        "CommandGroup": "Other"
    },
    {
        "CommandString": "Reset time",
        "CommandEnum": 8,
        "Description": "Resets the absolute time to zero (call this first before issuing any movement commands)",
        "Input": null,
        "Output": null,
        "CommandGroup": "Basic Control"
    },
    {
        "CommandString": "Get current time",
        "CommandEnum": 9,
        "Description": "Gets the current absolute time",
        "Input": null,
        "Output": [
            {
                "ParameterName": "currentTime",
                "ParameterType": "u48",
                "Description": "The current absolute time",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "time",
                    "InternalUnit": "time_steps",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Time sync",
        "CommandEnum": 10,
        "Description": "Sends the master time to the motor so that it can sync its own clock (do this 10 times per second).",
        "Input": [
            {
                "ParameterName": "masterTime",
                "ParameterType": "u48",
                "Description": "The motor absolute time that the motor should sync to (in microseconds).",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "Output": [
            {
                "ParameterName": "timeError",
                "ParameterType": "i32",
                "Description": "The error in the motor's time compared to the master time.",
                "TooltipDisplayFormat": "%d"
            },
            {
                "ParameterName": "rccIcscr",
                "ParameterType": "u16",
                "Description": "The contents of the RCC-ICSCR register (holds the HSICAL and HSITRIM settings).",
                "TooltipDisplayFormat": "%hu"
            }
        ],
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Get n queued items",
        "CommandEnum": 11,
        "Description": "Get the number of items currently in the movement queue (if this gets too large, don't queue any more movement commands)",
        "Input": null,
        "Output": [
            {
                "ParameterName": "queueSize",
                "ParameterType": "u8",
                "Description": "The number of items in the movement queue. This command will return between 0 and 32. If less than 32, you can add more items to the queue to continue the movements in order without stopping.",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Emergency stop",
        "CommandEnum": 12,
        "Description": "Emergency stop (stop all movement, disable MOSFETS, clear the queue)",
        "Input": null,
        "Output": null,
        "CommandGroup": "Basic Control"
    },
    {
        "CommandString": "Zero position",
        "CommandEnum": 13,
        "Description": "Make the current position the position zero (origin)",
        "Input": null,
        "Output": null,
        "CommandGroup": "Basic Control"
    },
    {
        "CommandString": "Homing",
        "CommandEnum": 14,
        "Description": "Homing (or in other words, move until a crash and then stop immediately)",
        "Input": [
            {
                "ParameterName": "maxDistance",
                "ParameterType": "i32",
                "Description": "The maximum distance to move (if a crash does not occur). This can be positive or negative. the sign determines the direction of movement.",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "maxDuration",
                "ParameterType": "u32",
                "Description": "The maximum time to allow for homing. Make sure to give enough time for the motor to cover the maximum distance or the motor may move too fast or throw a fatal error.",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "time",
                    "InternalUnit": "timesteps",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Motion Control"
    },
    {
        "CommandString": "Get hall sensor position",
        "CommandEnum": 15,
        "Description": "Get the position as measured by the hall sensors (this should be the actual position of the motor and if everything is ok then it will be about the same as the desired position)",
        "Input": null,
        "Output": [
            {
                "ParameterName": "hallSensorPosition",
                "ParameterType": "i64",
                "Description": "The current position as determined by the hall sensors",
                "TooltipDisplayFormat": "%lld",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Get status",
        "CommandEnum": 16,
        "Description": "Gets the status of the motor",
        "Input": null,
        "Output": [
            {
                "ParameterName": "statusFlags",
                "ParameterType": "u16",
                "Description": "A series of flags which are 1 bit each",
                "BitDescriptions": [
                    "Bit 0: In the bootloader (if this flag is set then the other flags below will all be 0)",
                    "Bit 1: MOSFETs are enabled",
                    "Bit 2: Motor is in closed loop mode",
                    "Bit 3: Motor is currently executing the calibration command",
                    "Bit 4: Motor is currently executing a homing command",
                    "Bit 5: Motor is currently executing the procedure to go to closed loop mode",
                    "Bit 6: Motor is currently busy doing a time consuming task and is not ready to take another command",
                    "Bit 7: Not used, set to 0",
                    "Bit 8: Not used, set to 0",
                    "Bit 9: Not used, set to 0",
                    "Bit 10: Not used, set to 0",
                    "Bit 11: Not used, set to 0",
                    "Bit 12: Not used, set to 0",
                    "Bit 13: Not used, set to 0",
                    "Bit 14: Not used, set to 0",
                    "Bit 15: Not used, set to 0"
                ],
                "TooltipDisplayFormat": "%b"
            },
            {
                "ParameterName": "fatalErrorCode",
                "ParameterType": "u8",
                "Description": "The fatal error code. If 0 then there is no fatal error. Once a fatal error happens, the motor becomes disabled and cannot do much anymore until reset. You can press the reset button on the motor or you can execute the System reset command to get out of the fatal error state.",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Go to closed loop",
        "CommandEnum": 17,
        "Description": "Go to closed loop position control mode",
        "Input": null,
        "Output": null,
        "CommandGroup": "Motion Control"
    },
    {
        "CommandString": "Get product specs",
        "CommandEnum": 18,
        "Description": "Get the update frequency (reciprocal of the time step)",
        "Input": null,
        "Output": [
            {
                "ParameterName": "updateFrequency",
                "ParameterType": "u32",
                "Description": "Update frequency in Hz. This is how often the motor executes all calculations for hall sensor position, movement, PID loop, safety, etc.",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "countsPerRotation",
                "ParameterType": "u32",
                "Description": "Counts per rotation. When commanding the motor or when reading back position, this is the number of counts per one shaft rotation.",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Move with acceleration",
        "CommandEnum": 19,
        "Description": "Rotates the motor with the specified acceleration",
        "Input": [
            {
                "ParameterName": "acceleration",
                "ParameterType": "i32",
                "Description": "The acceleration (the unit is microsteps per time step per time step * 2^24).",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "acceleration",
                    "InternalUnit": "counts_per_timestep_squared",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "timeSteps",
                "ParameterType": "u32",
                "Description": "The number of time steps to apply this acceleration. Use command 18 to get the frequency of the time steps. After this many time steps, the acceleration will go to zero and velocity will be maintained.",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "time",
                    "InternalUnit": "timesteps",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Motion Control"
    },
    {
        "CommandString": "Detect devices",
        "CommandEnum": 20,
        "Description": "Detect all of the devices that are connected on the RS485 interface. Devices will identify themselves at a random time within one second. Chance of collision is possible but unlikely. You can repeat this if you suspect a collision (like if you have devices connected but they were not discovered within one to two seconds).",
        "Input": null,
        "Output": [
            {
                "ParameterName": "uniqueId",
                "ParameterType": "u64",
                "Description": "A unique ID (unique among all devices manufactured). The response is sent after a random delay of between 0 and 1 seconds.",
                "TooltipDisplayFormat": "%x"
            },
            {
                "ParameterName": "alias",
                "ParameterType": "u8",
                "Description": "The alias of the device that has this unique ID.",
                "TooltipDisplayFormat": "%u,%c"
            }
        ],
        "MultipleResponses": true,
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Set device alias",
        "CommandEnum": 21,
        "Description": "Sets device alias",
        "Input": [
            {
                "ParameterName": "alias",
                "ParameterType": "u8",
                "Description": "The alias (which is a one byte ID) ranging from 0 to 251. It cannot be 252 to 254 because those are reserved. You can set it to 255, which will remove the alias.",
                "TooltipDisplayFormat": "%u,%c"
            }
        ],
        "Output": null,
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Get product info",
        "CommandEnum": 22,
        "Description": "Get product information",
        "Input": null,
        "Output": [
            {
                "ParameterName": "productCode",
                "ParameterType": "array8",
                "Description": "The product code / model number (when doing a firmware upgrade, this must match between the firmware file and the target device).",
                "TooltipDisplayFormat": "%s"
            },
            {
                "ParameterName": "firmwareCompatibility",
                "ParameterType": "u8",
                "Description": "A firmware compatibility code (when doing a firmware upgrade, this must match between the firmware file and the target device).",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "hardwareVersion",
                "ParameterType": "array3",
                "Description": "The hardware version stored as 3 bytes. The first byte is the patch version, followed by the minor and major versions.",
                "TooltipDisplayFormat": "version"
            },
            {
                "ParameterName": "serialNumber",
                "ParameterType": "array4",
                "Description": "The serial number.",
                "TooltipDisplayFormat": "version"
            },
            {
                "ParameterName": "uniqueId",
                "ParameterType": "u64",
                "Description": "The unique ID for the product.",
                "TooltipDisplayFormat": "%x"
            },
            {
                "ParameterName": "reserved",
                "ParameterType": "u32",
                "Description": "Not currently used.",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Firmware upgrade",
        "CommandEnum": 23,
        "Description": "This command will upgrade the flash memory of the servo motor. Before issuing a firmware upgrade command, you must do some calculations as shown in the examples.",
        "Input": [
            {
                "ParameterName": "firmwarePage",
                "ParameterType": "firmware_page",
                "Description": "The data to upgrade one page of flash memory. Contents includes the product model code (8 bytes), firmware compatibility code (1 byte), page number (1 byte), and the page data itself (2048 bytes).",
                "TooltipDisplayFormat": null
            }
        ],
        "Output": null,
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Get product description",
        "CommandEnum": 24,
        "Description": "Get the product description.",
        "Input": null,
        "Output": [
            {
                "ParameterName": "productDescription",
                "ParameterType": "string_null_term",
                "Description": "This is a brief description of the product.",
                "TooltipDisplayFormat": "%s"
            }
        ],
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Get firmware version",
        "CommandEnum": 25,
        "Description": "Get the firmware version or the bootloader version depending on what mode we are in. This command also returns the status bits, where the least significan bit teels us if we are currently in the bootloader (=1) or the main firmware (=0)",
        "Input": null,
        "Output": [
            {
                "ParameterName": "firmwareVersion",
                "ParameterType": "array4",
                "Description": "The firmware version stored as 4 bytes. The first byte is the development number, then patch version, followed by the minor and major versions.",
                "TooltipDisplayFormat": "version"
            },
            {
                "ParameterName": "inBootloader",
                "ParameterType": "u8",
                "Description": ": A flag that tells us if we are in the bootloader (=1) or in the regular firmware (=0)",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Move with velocity",
        "CommandEnum": 26,
        "Description": "Rotates the motor with the specified velocity.",
        "Input": [
            {
                "ParameterName": "velocity",
                "ParameterType": "i32",
                "Description": "The velocity (the unit is microsteps per time step * 2^20).",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "velocity",
                    "InternalUnit": "counts_per_timestep",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "duration",
                "ParameterType": "u32",
                "Description": "The time to maintain this velocity.",
                "TooltipDisplayFormat": "%u",
                "UnitConversion": {
                    "Type": "time",
                    "InternalUnit": "timesteps",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Motion Control"
    },
    {
        "CommandString": "System reset",
        "CommandEnum": 27,
        "Description": "System reset / go to the bootloader. The motor will reset immediately and will enter the bootloader. If there is no command sent within a short time, the motor will exit the bootloader and run the application from the beginning.",
        "Input": null,
        "Output": null,
        "CommandGroup": "Basic Control"
    },
    {
        "CommandString": "Set maximum motor current",
        "CommandEnum": 28,
        "Description": "Set the maximum motor current and maximum regeneration current. The values are stored in non-volatile memory and survive a reset.",
        "Input": [
            {
                "ParameterName": "motorCurrent",
                "ParameterType": "u16",
                "Description": "The motor current. The units are some arbitrary units and not amps. A value of 150 or 200 is suitable.",
                "TooltipDisplayFormat": "%hu",
                "UnitConversion": {
                    "Type": "current",
                    "InternalUnit": "arbitrary_units",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "regenerationCurrent",
                "ParameterType": "u16",
                "Description": "The motor regeneration current (while it is braking). This parameter is currently not used for anything.",
                "TooltipDisplayFormat": "%hu",
                "UnitConversion": {
                    "Type": "current",
                    "InternalUnit": "arbitrary_units",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Multimove",
        "CommandEnum": 29,
        "Description": "The multimove command allows you to compose multiple moves one after another. Please note that when the queue becomes empty after all the moves are executed and the motor is not at a standstill then a fatal error will be triggered.",
        "Input": [
            {
                "ParameterName": "moveCount",
                "ParameterType": "u8",
                "Description": "Specify how many moves are being communicated in this one shot.",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "moveTypes",
                "ParameterType": "u32",
                "Description": "Each bit specifies if the move is a (bit = 0) MOVE_WITH_ACCELERATION_COMMAND or a (bit = 1) MOVE_WITH_VELOCITY_COMMAND.",
                "TooltipDisplayFormat": "%b"
            },
            {
                "ParameterName": "moveList",
                "ParameterType": "list_2d",
                "Description": "A 2D list in Python format (list of lists). Each item in the list is of type [i32, u32] representing a series of move commands. Each move command specifies the acceleration to move at or the velocity to instantly change to (according to the bits above) and the number of time steps over which this command is to be executed. For example: '[[100, 30000], [-200, 60000]]'. There is a limit of 32 move commands that can be listed in this one multi-move command. Each of the moves takes up one queue spot, so make sure there is enough space in the queue to store all of the commands.",
                "TooltipDisplayFormat": null,
                "UnitConversion": {
                    "Type": "mixed_acceleration_velocity_time",
                    "InternalUnit": "mixed_acceleration_velocity_time",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Motion Control"
    },
    {
        "CommandString": "Set safety limits",
        "CommandEnum": 30,
        "Description": "Set safety limits (to prevent motion from exceeding set bounds)",
        "Input": [
            {
                "ParameterName": "lowerLimit",
                "ParameterType": "i64",
                "Description": ": The lower limit in microsteps.",
                "TooltipDisplayFormat": "%lld",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "upperLimit",
                "ParameterType": "i64",
                "Description": "The upper limit in microsteps.",
                "TooltipDisplayFormat": "%lld",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Ping",
        "CommandEnum": 31,
        "Description": "Send a payload containing any data and the device will respond with the same data back",
        "Input": [
            {
                "ParameterName": "pingData",
                "ParameterType": "array10",
                "Description": "Any binary data payload to send to the device.",
                "TooltipDisplayFormat": "%s"
            }
        ],
        "Output": [
            {
                "ParameterName": "responsePayload",
                "ParameterType": "array10",
                "Description": "The same data that was sent to the device will be returned if all went well.",
                "TooltipDisplayFormat": "%s"
            }
        ],
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Control hall sensor statistics",
        "CommandEnum": 32,
        "Description": "Turn on or off the gathering of statistics for the hall sensors and reset the statistics",
        "Input": [
            {
                "ParameterName": "control",
                "ParameterType": "u8",
                "Description": "0 = turn off statistics gathering, 1 = reset statistics and turn on gathering.",
                "TooltipDisplayFormat": "u8"
            }
        ],
        "Output": null,
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Get hall sensor statistics",
        "CommandEnum": 33,
        "Description": "Read back the statistics gathered from the hall sensors. Useful for checking the hall sensor health and noise in the system.",
        "Input": null,
        "Output": [
            {
                "ParameterName": "maxHall1",
                "ParameterType": "u16",
                "Description": "The maximum value of hall sensor 1 encoutered since the last statistics reset.",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "maxHall2",
                "ParameterType": "u16",
                "Description": "The maximum value of hall sensor 2 encoutered since the last statistics reset.",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "maxHall3",
                "ParameterType": "u16",
                "Description": "The maximum value of hall sensor 3 encoutered since the last statistics reset.",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "minHall1",
                "ParameterType": "u16",
                "Description": "The minimum value of hall sensor 1 encoutered since the last statistics reset.",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "minHall2",
                "ParameterType": "u16",
                "Description": "The minimum value of hall sensor 2 encoutered since the last statistics reset.",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "minHall3",
                "ParameterType": "u16",
                "Description": "The minimum value of hall sensor 3 encoutered since the last statistics reset.",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "sumHall1",
                "ParameterType": "u64",
                "Description": "The sum of hall sensor 1 values collected since the last statistics reset.",
                "TooltipDisplayFormat": "%llu"
            },
            {
                "ParameterName": "sumHall2",
                "ParameterType": "u64",
                "Description": "The sum of hall sensor 2 values collected since the last statistics reset.",
                "TooltipDisplayFormat": "%llu"
            },
            {
                "ParameterName": "sumHall3",
                "ParameterType": "u64",
                "Description": "The sum of hall sensor 3 values collected since the last statistics reset.",
                "TooltipDisplayFormat": "%llu"
            },
            {
                "ParameterName": "measurementCount",
                "ParameterType": "u32",
                "Description": "The number of times the hall sensors were measured since the last statistics reset.",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Get position",
        "CommandEnum": 34,
        "Description": "Get the current desired position (which may differ a bit from the actual position as measured by the hall sensors)",
        "Input": null,
        "Output": [
            {
                "ParameterName": "position",
                "ParameterType": "i64",
                "Description": "The current desired position",
                "TooltipDisplayFormat": "%lld",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Read multipurpose buffer",
        "CommandEnum": 35,
        "Description": "Read whatever is in the multipurpose buffer (the buffer is used for data generated during calibration, going to closed loop mode, and when capturing hall sensor data)",
        "Input": null,
        "Output": [
            {
                "ParameterName": "bufferData",
                "ParameterType": "array",
                "Description": "The data in the buffer (the format and length of the data depends on what was put in the buffer)",
                "TooltipDisplayFormat": null
            }
        ],
        "CommandGroup": "Other"
    },
    {
        "CommandString": "Test mode",
        "CommandEnum": 36,
        "Description": "Set or trigger a certain test mode. This is a bit undocumented at the moment. Don't use this unless you are a developer working on test cases.",
        "Input": [
            {
                "ParameterName": "testMode",
                "ParameterType": "u8",
                "Description": "The test mode to use or trigger",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Get comprehensive position",
        "CommandEnum": 37,
        "Description": "Get the desired motor position, hall sensor position, and external encoder position all in one shot",
        "Input": null,
        "Output": [
            {
                "ParameterName": "commandedPosition",
                "ParameterType": "i64",
                "Description": "The commanded position (which may differ from actual)",
                "TooltipDisplayFormat": "%lld",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "hallSensorPosition",
                "ParameterType": "i64",
                "Description": "The hall sensor position (or you could say the actual measured position)",
                "TooltipDisplayFormat": "%lld",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "externalEncoderPosition",
                "ParameterType": "i32",
                "Description": "The external encoder position. This needs special hardware attached to the motor to work",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Get supply voltage",
        "CommandEnum": 38,
        "Description": "Get the measured voltage of the power supply.",
        "Input": null,
        "Output": [
            {
                "ParameterName": "supplyVoltage",
                "ParameterType": "u16",
                "Description": "The voltage. Divide this number by 10 to get the actual voltage in volts.",
                "TooltipDisplayFormat": "%hu",
                "UnitConversion": {
                    "Type": "voltage",
                    "InternalUnit": "decivolts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Get max PID error",
        "CommandEnum": 39,
        "Description": "Get the minimum and maximum error value ovserved in the PID control loop since the last read.",
        "Input": null,
        "Output": [
            {
                "ParameterName": "minPidError",
                "ParameterType": "i32",
                "Description": "The minimum PID error value.",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            },
            {
                "ParameterName": "maxPidError",
                "ParameterType": "i32",
                "Description": "The maximum PID error value.",
                "TooltipDisplayFormat": "%d",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Vibrate",
        "CommandEnum": 40,
        "Description": "Cause the motor to start to vary the voltage quickly and therefore to vibrate (or stop).",
        "Input": [
            {
                "ParameterName": "vibrationLevel",
                "ParameterType": "u8",
                "Description": "Vibration level (0 = turn off, 1 = turn on).",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "Output": null,
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Identify",
        "CommandEnum": 41,
        "Description": "Identify your motor by sending this command. The motor's green LED will flash rapidly for 3 seconds.",
        "Input": null,
        "Output": null,
        "CommandGroup": "Device Management"
    },
    {
        "CommandString": "Get temperature",
        "CommandEnum": 42,
        "Description": "Get the measured temperature of the motor.",
        "Input": null,
        "Output": [
            {
                "ParameterName": "temperature",
                "ParameterType": "i16",
                "Description": "The temperature in degrees celcius. The accuracy is about +/- 3 degrees celcius and is measured at the motor driver PCB.",
                "TooltipDisplayFormat": "%hd",
                "UnitConversion": {
                    "Type": "temperature",
                    "InternalUnit": "celsius",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "Set PID constants",
        "CommandEnum": 43,
        "Description": "Set PID constants for the control loop that will try to maintain the motion trajectory.",
        "Input": [
            {
                "ParameterName": "kP",
                "ParameterType": "u32",
                "Description": "The proportional term constant (P)",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "kI",
                "ParameterType": "u32",
                "Description": "The integral term constant (I)",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "kD",
                "ParameterType": "u32",
                "Description": "The differential term constant (D)",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Set max allowable position deviation",
        "CommandEnum": 44,
        "Description": "Set the amount of microsteps that the actual motor position (as measured by the hall sensors) is allowed to deviate from the desired position. Throw a fatal error if this is exceeded.",
        "Input": [
            {
                "ParameterName": "maxAllowablePositionDeviation",
                "ParameterType": "i64",
                "Description": "The new maximum allowable position deviation setting",
                "TooltipDisplayFormat": "%lld",
                "UnitConversion": {
                    "Type": "position",
                    "InternalUnit": "encoder_counts",
                    "ConversionFactorsFile": "unit_conversions_{motor_type}.json"
                }
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Get debug values",
        "CommandEnum": 45,
        "Description": "Get debug values including motor control parameters, profiler times, hall sensor data, and other diagnostic information.",
        "Input": null,
        "Output": [
            {
                "ParameterName": "maxAcceleration",
                "ParameterType": "i64",
                "Description": "Maximum acceleration setting",
                "TooltipDisplayFormat": "%lld"
            },
            {
                "ParameterName": "maxVelocity",
                "ParameterType": "i64",
                "Description": "Maximum velocity setting",
                "TooltipDisplayFormat": "%lld"
            },
            {
                "ParameterName": "currentVelocity",
                "ParameterType": "i64",
                "Description": "Current velocity",
                "TooltipDisplayFormat": "%lld"
            },
            {
                "ParameterName": "measuredVelocity",
                "ParameterType": "i32",
                "Description": "Measured velocity",
                "TooltipDisplayFormat": "%d"
            },
            {
                "ParameterName": "nTimeSteps",
                "ParameterType": "u32",
                "Description": ": Number of time steps left in the current move",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "debugValue1",
                "ParameterType": "i64",
                "Description": "Debug value 1",
                "TooltipDisplayFormat": "%lld"
            },
            {
                "ParameterName": "debugValue2",
                "ParameterType": "i64",
                "Description": "Debug value 2",
                "TooltipDisplayFormat": "%lld"
            },
            {
                "ParameterName": "debugValue3",
                "ParameterType": "i64",
                "Description": "Debug value 3",
                "TooltipDisplayFormat": "%lld"
            },
            {
                "ParameterName": "debugValue4",
                "ParameterType": "i64",
                "Description": "Debug value 4",
                "TooltipDisplayFormat": "%lld"
            },
            {
                "ParameterName": "allMotorControlCalculationsProfilerTime",
                "ParameterType": "u16",
                "Description": "All motor control calculations profiler time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "allMotorControlCalculationsProfilerMaxTime",
                "ParameterType": "u16",
                "Description": "All motor control calculations profiler maximum time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "getSensorPositionProfilerTime",
                "ParameterType": "u16",
                "Description": "Get sensor position profiler time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "getSensorPositionProfilerMaxTime",
                "ParameterType": "u16",
                "Description": "Get sensor position profiler maximum time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "computeVelocityProfilerTime",
                "ParameterType": "u16",
                "Description": "Compute velocity profiler time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "computeVelocityProfilerMaxTime",
                "ParameterType": "u16",
                "Description": "Compute velocity profiler maximum time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "motorMovementCalculationsProfilerTime",
                "ParameterType": "u16",
                "Description": "Motor movement calculations profiler time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "motorMovementCalculationsProfilerMaxTime",
                "ParameterType": "u16",
                "Description": "Motor movement calculations profiler maximum time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "motorPhaseCalculationsProfilerTime",
                "ParameterType": "u16",
                "Description": "Motor phase calculations profiler time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "motorPhaseCalculationsProfilerMaxTime",
                "ParameterType": "u16",
                "Description": "Motor phase calculations profiler maximum time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "motorControlLoopPeriodProfilerTime",
                "ParameterType": "u16",
                "Description": "Motor control loop period profiler time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "motorControlLoopPeriodProfilerMaxTime",
                "ParameterType": "u16",
                "Description": "Motor control loop period profiler maximum time",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "hallSensor1Voltage",
                "ParameterType": "u16",
                "Description": "Hall sensor 1 voltage",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "hallSensor2Voltage",
                "ParameterType": "u16",
                "Description": "Hall sensor 2 voltage",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "hallSensor3Voltage",
                "ParameterType": "u16",
                "Description": "Hall sensor 3 voltage",
                "TooltipDisplayFormat": "%hu"
            },
            {
                "ParameterName": "commutationPositionOffset",
                "ParameterType": "u32",
                "Description": "Commutation position offset",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "motorPhasesReversed",
                "ParameterType": "u8",
                "Description": "Motor phases reversed flag",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "maxHallPositionDelta",
                "ParameterType": "i32",
                "Description": "Maximum hall position delta",
                "TooltipDisplayFormat": "%d"
            },
            {
                "ParameterName": "minHallPositionDelta",
                "ParameterType": "i32",
                "Description": "Minimum hall position delta",
                "TooltipDisplayFormat": "%d"
            },
            {
                "ParameterName": "averageHallPositionDelta",
                "ParameterType": "i32",
                "Description": "Average hall position delta",
                "TooltipDisplayFormat": "%d"
            },
            {
                "ParameterName": "motorPwmVoltage",
                "ParameterType": "u8",
                "Description": "Motor PWM voltage",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Status & Monitoring"
    },
    {
        "CommandString": "CRC32 control",
        "CommandEnum": 46,
        "Description": "Enable or disable CRC32 checking for commands",
        "Input": [
            {
                "ParameterName": "enableCrc32",
                "ParameterType": "u8",
                "Description": "Control value (1 to enable, 0 to disable CRC32 checking)",
                "TooltipDisplayFormat": "u8"
            }
        ],
        "Output": null,
        "CommandGroup": "Configuration"
    },
    {
        "CommandString": "Get communication statistics",
        "CommandEnum": 47,
        "Description": "Get and optionally reset the CRC32 error counter",
        "Input": [
            {
                "ParameterName": "resetCounter",
                "ParameterType": "u8",
                "Description": "Reset flag (1 to reset the counter after reading, 0 to just read)",
                "TooltipDisplayFormat": "u8"
            }
        ],
        "Output": [
            {
                "ParameterName": "crc32ErrorCount",
                "ParameterType": "u32",
                "Description": "Number of CRC32 errors detected",
                "TooltipDisplayFormat": "%u"
            },
            {
                "ParameterName": "packetDecodeErrorCount",
                "ParameterType": "u32",
                "Description": "Number of packet decode errors detected",
                "TooltipDisplayFormat": "%u"
            }
        ],
        "CommandGroup": "Status & Monitoring"
    }
]